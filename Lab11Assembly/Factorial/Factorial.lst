Microsoft (R) Macro Assembler Version 14.15.26730.0	    05/20/19 00:28:35
Factorial.asm						     Page 1 - 1


				.386
				public @isOne@4
				public @decrement@4
				public @multiply@8
				.model flat
 00000000			.code

 00000000			@isOne@4 proc

 00000000  8B 01		mov eax, [ecx]
 00000002  83 F8 01		cmp eax, 1
 00000005  75 11		jne notOne

 00000007  83 C1 04		add ecx, 4
 0000000A  8B 01		mov eax, [ecx]
 0000000C  83 F8 01		cmp eax, 1
 0000000F  75 07		jne notOne

 00000011  B8 00000001		mov eax, 1
 00000016  EB 05		jmp procEnd

 00000018			notOne:

 00000018  B8 00000000		mov eax, 0

 0000001D			procEnd:

 0000001D  C3			ret

 0000001E			@isOne@4 endp

 0000001E			@decrement@4 proc

 0000001E  BA 00000004		mov edx, 4
 00000023  8B 04 11		mov eax, [ecx + edx]
 00000026  48			dec eax
 00000027  89 04 11		mov [ecx + edx], eax

 0000002A			whileBegin:

 0000002A  83 F8 00		cmp eax, 0
 0000002D  7D 12		jge whileEnd

 0000002F  83 C0 0A		add eax, 10
 00000032  89 04 11		mov [ecx + edx], eax
 00000035  83 C2 04		add edx, 4

 00000038  8B 04 11		mov eax, [ecx + edx]
 0000003B  48			dec eax
 0000003C  89 04 11		mov [ecx + edx], eax

 0000003F  EB E9		jmp whileBegin

 00000041			whileEnd:

 00000041  8B 11		mov edx, [ecx]
 00000043  C1 E2 02		shl edx, 2
 00000046  8B 04 11		mov eax, [ecx + edx]

 00000049  83 F8 00		cmp eax, 0
 0000004C  75 05		jne procEnd

 0000004E  8B 01		mov eax, [ecx]
 00000050  48			dec eax
 00000051  89 01		mov [ecx], eax

 00000053			procEnd:

 00000053  C3			ret

 00000054			@decrement@4 endp

 00000054			@multiply@8 proc

 00000054  8B 01		mov eax, [ecx]
 00000056  03 02		add eax, [edx]

 00000058  55			push ebp
 00000059  8B EC		mov ebp, esp
 0000005B  83 EC 03		sub esp, 3
 0000005E  2B E0		sub esp, eax		; резервирование локальных переменных

 00000060  89 4D FC		mov [ebp - 4], ecx
 00000063  89 55 F8		mov [ebp - 8], edx

 00000066  89 45 F4		mov dword ptr [ebp - 12], eax 
 00000069  8B C8		mov ecx, eax
 0000006B  83 C0 03		add eax, 3
 0000006E  C1 E0 02		shl eax, 2
 00000071  F7 D8		neg eax

 00000073  33 DB		xor ebx, ebx

 00000075			nullLoop:

 00000075  89 5C 05 00		mov [ebp + eax], ebx
 00000079  83 C0 04		add eax, 4

 0000007C  E2 F7		loop nullLoop		; обнуление локального массива переменных

 0000007E  8B 4D F8		mov ecx, [ebp - 8]
 00000081  8B 09		mov ecx, [ecx]

 00000083			outLoop:

 00000083  8B D9		mov ebx, ecx
 00000085  8B 4D FC		mov ecx, [ebp - 4]
 00000088  8B 09		mov ecx, [ecx]

 0000008A			inLoop:

 0000008A  8B 45 FC		mov eax, [ebp - 4]
 0000008D  8B 04 88		mov eax, [eax + ecx*4]
 00000090  99			cdq
 00000091  8B 7D F8		mov edi, [ebp - 8]
 00000094  F7 24 9F		mul dword ptr [edi + ebx*4]

 00000097  8B F1		mov esi, ecx
 00000099  03 F3		add esi, ebx
 0000009B  83 C6 02		add esi, 2
 0000009E  C1 E6 02		shl esi, 2
 000000A1  F7 DE		neg esi

 000000A3  01 44 35 00		add [ebp + esi], eax

 000000A7  E2 E1		loop inLoop

 000000A9  8B CB		mov ecx, ebx

 000000AB  E2 D6		loop outLoop		; перемножение массивов

 000000AD  8B 4D F4		mov ecx, [ebp - 12]
 000000B0  49			dec ecx
 000000B1  BB FFFFFFF0		mov ebx, -16

 000000B6			normalLoop:

 000000B6  8B 44 1D 00		mov eax, [ebp + ebx]
 000000BA  83 F8 0A		cmp eax, 10
 000000BD  7C 10		jl lastLoopStr

 000000BF  99			cdq
 000000C0  BF 0000000A		mov edi, 10
 000000C5  F7 F7		div edi
 000000C7  01 44 1D FC		add [ebp + ebx - 4], eax
 000000CB  89 54 1D 00		mov [ebp + ebx], edx

 000000CF			lastLoopStr:

 000000CF  83 EB 04		sub ebx, 4

 000000D2  E2 E2		loop normalLoop		; нормализация массива

 000000D4  8B 4D F4		mov ecx, [ebp - 12]
 000000D7  83 C1 04		add ecx, 4
 000000DA  C1 E1 02		shl ecx, 2
 000000DD  F7 D9		neg ecx

 000000DF  33 DB		xor ebx, ebx

 000000E1			carry:

 000000E1  FF 4D F4		dec dword ptr [ebp - 12]
 000000E4  83 C1 04		add ecx, 4
 000000E7  39 5C 0D 00		cmp [ebp + ecx], ebx
 000000EB  74 F4		je carry		

 000000ED  FF 45 F4		inc dword ptr [ebp - 12]
									; перенос

 000000F0  8B 4D F4		mov ecx, [ebp - 12]
 000000F3  41			inc ecx
 000000F4  BE 00000000		mov esi, 0
 000000F9  BF FFFFFFF4		mov edi, -12

 000000FE			copyLoop:

 000000FE  8B 45 FC		mov eax, [ebp - 4]
 00000101  8B 5C 3D 00		mov ebx, [ebp + edi]
 00000105  89 1C 30		mov [eax + esi], ebx
 00000108  83 C6 04		add esi, 4
 0000010B  83 EF 04		sub edi, 4

 0000010E  E2 EE		loop copyLoop		; копирование массивов

 00000110  C9			leave

 00000111  C3			ret

 00000112			@multiply@8 endp

				End
Microsoft (R) Macro Assembler Version 14.15.26730.0	    05/20/19 00:28:35
Factorial.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000112 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

@decrement@4 . . . . . . . . . .	P Near	 0000001E _TEXT	Length= 00000036 Public
  whileBegin . . . . . . . . . .	L Near	 0000002A _TEXT	
  whileEnd . . . . . . . . . . .	L Near	 00000041 _TEXT	
  procEnd  . . . . . . . . . . .	L Near	 00000053 _TEXT	
@isOne@4 . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001E Public
  notOne . . . . . . . . . . . .	L Near	 00000018 _TEXT	
  procEnd  . . . . . . . . . . .	L Near	 0000001D _TEXT	
@multiply@8  . . . . . . . . . .	P Near	 00000054 _TEXT	Length= 000000BE Public
  nullLoop . . . . . . . . . . .	L Near	 00000075 _TEXT	
  outLoop  . . . . . . . . . . .	L Near	 00000083 _TEXT	
  inLoop . . . . . . . . . . . .	L Near	 0000008A _TEXT	
  normalLoop . . . . . . . . . .	L Near	 000000B6 _TEXT	
  lastLoopStr  . . . . . . . . .	L Near	 000000CF _TEXT	
  carry  . . . . . . . . . . . .	L Near	 000000E1 _TEXT	
  copyLoop . . . . . . . . . . .	L Near	 000000FE _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT

	   0 Warnings
	   0 Errors
